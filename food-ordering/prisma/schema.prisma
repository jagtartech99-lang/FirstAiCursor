// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  // Credentials
  passwordHash     String?
  role             UserRole     @default(CUSTOMER)
  // Relations
  accounts         Account[]
  sessions         Session[]
  addresses        Address[]
  orders           Order[]      @relation("UserOrders")
  reviews          Review[]
  restaurantsOwned Restaurant[] @relation("OwnerRestaurants")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

enum UserRole {
  CUSTOMER
  OWNER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id              String     @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  cuisineType     String
  averageRating   Float      @default(0)
  deliveryTimeMin Int        @default(30)
  deliveryTimeMax Int        @default(50)
  deliveryBaseFee Int        @default(199) // cents
  latitude        Float?
  longitude       Float?
  ownerId         String
  owner           User       @relation("OwnerRestaurants", fields: [ownerId], references: [id], onDelete: Cascade)
  menuItems       MenuItem[]
  reviews         Review[]
  orders          Order[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model MenuItem {
  id           String       @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  imageUrl     String?
  priceCents   Int
  category     MenuCategory
  isAvailable  Boolean      @default(true)
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum MenuCategory {
  APPETIZER
  MAIN
  DESSERT
  DRINK
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  label      String? // e.g., Home, Work
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  latitude   Float?
  longitude  Float?
  isDefault  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]  @relation("OrderAddress")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id               String        @id @default(cuid())
  userId           String
  restaurantId     String
  addressId        String
  status           OrderStatus   @default(PENDING)
  paymentMethod    PaymentMethod
  subtotalCents    Int
  deliveryFeeCents Int
  totalCents       Int
  placedAt         DateTime      @default(now())
  estimatedReadyAt DateTime?
  user             User          @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  restaurant       Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  address          Address       @relation("OrderAddress", fields: [addressId], references: [id])
  items            OrderItem[]
  events           OrderEvent[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  WALLET
  CASH_ON_DELIVERY
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  menuItemId      String
  quantity        Int      @default(1)
  unitPriceCents  Int
  totalPriceCents Int
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem        MenuItem @relation(fields: [menuItemId], references: [id])
}

model OrderEvent {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  message   String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id           String     @id @default(cuid())
  userId       String
  restaurantId String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
}
