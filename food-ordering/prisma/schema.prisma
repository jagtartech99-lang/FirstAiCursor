// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  passwordHash   String
  role           Role      @default(CUSTOMER)
  image          String?
  addresses      Address[]
  orders         Order[]
  reviews        Review[]
  restaurantsOwned Restaurant[]
  resetTokens    PasswordResetToken[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Restaurant {
  id          String       @id @default(cuid())
  name        String
  description String?
  image       String?
  cuisine     String
  rating      Float        @default(0)
  owner       User         @relation(fields: [ownerId], references: [id])
  ownerId     String
  menus       MenuItem[]
  orders      Order[]
  reviews     Review[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model MenuItem {
  id            String      @id @default(cuid())
  name          String
  description   String?
  image         String?
  priceCents    Int
  category      MenuCategory
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Address {
  id         String   @id @default(cuid())
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  latitude   Float?
  longitude  Float?
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id               String        @id @default(cuid())
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  restaurant       Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId     String
  items            OrderItem[]
  status           OrderStatus   @default(PLACED)
  totalCents       Int
  deliveryFeeCents Int           @default(0)
  addressLine1     String
  addressLine2     String?
  city             String
  state            String
  postalCode       String
  paymentMethod    PaymentMethod
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model OrderItem {
  id         String    @id @default(cuid())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int       @default(1)
  priceCents Int
}

model Review {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  rating       Int
  comment      String?
  createdAt    DateTime    @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

enum MenuCategory {
  APPETIZER
  MAIN
  DESSERT
  DRINK
}

enum OrderStatus {
  PLACED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  WALLET
  CASH
}